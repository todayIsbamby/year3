# -*- coding: utf-8 -*-
"""4.2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ng8qSOBSZotap01n5vU14cFWyuX3fpz6
"""

#Array, image processing
import cv2
import numpy as np
import matplotlib.pyplot as plt
#Model Operation
from keras import Model, Input
import keras.utils as image
# from keras.wrappers.scikit_learn import KerasRegressor


from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, UpSampling2D
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.preprocessing.image import load_img, img_to_array

from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn import metrics
# io
import glob
from tqdm import tqdm
import warnings;
warnings.filterwarnings('ignore')

import tensorflow as tf
physical_devices = tf.config.list_physical_devices('GPU')
if physical_devices:
    print("GPU is available")
else:
    print("GPU is NOT available")

Input_img = Input(shape=(80, 80, 3))

# Encoding architecture
#Layer 1
x1 = Conv2D(256, (3, 3), activation='relu', padding='same')(Input_img)

#Layer 2
x2 = Conv2D(128, (3, 3), activation='relu', padding='same')(x1)

#Layer 3
x3 = MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(x2)

#Layer 4
encoded = Conv2D(64, (3, 3), activation='relu', padding='same')(x3)

#Layer 5
x4 = Conv2D(64, (3, 3), activation='relu', padding='same')(encoded)

#Layer 6
x5 = Conv2D(128, (3, 3), activation='relu', padding='same')(x4)  # Connect to the encoder's x4

#Layer 7
x6 = UpSampling2D(size=(2, 2))(x5)  # Upsample by a factor of 2

#Layer 9
x7 = Conv2D(256, (3, 3), activation='relu', padding='same')(x6)

#Layer 10
decoded= Conv2D(3, (3, 3), activation='sigmoid', padding='same')(x7)  # Output layer with 3 channels

autoencoder = Model(Input_img, decoded)
autoencoder.compile(optimizer='adam', loss='mse')


autoencoder.summary()

# Place tensors on the CPU
with tf.device('/GPU:0'):
    # tf.constant(image_files)
    image_files = glob.glob("/content/drive/MyDrive/datasetimgs/face_mini/**/*.jpg")  # เปลี่ยนเส้นทางไปยังโฟลเดอร์ภาพของคุณ
    imgs = []
    for i in range(1000):
        img = load_img(image_files[i], target_size=(80, 80), interpolation="nearest")
        img_array = img_to_array(img)
        imgs.append(img_array)
    print(len(imgs))
    # 2. Normalized ภาพ (เพื่อให้ค่า pixel intensity = [0, 1])
    imgs = np.array(imgs) / 255.0

    # 3. Append images to an array

    # 4. แบ่งชุดข้อมูลเป็น Training_data, Testing_data (70 : 30)
    train_x, test_x = train_test_split(imgs, random_state=42, test_size=0.3)

    # 5. แบ่งชุดข้อมูล Training_data เป็น Training_data, Validation_data (80:20)
    train_x, val_x = train_test_split(train_x, random_state=42, test_size=0.2)

    # 6. กำหนด noise parameters
    noise_mean = 0
    noise_std = 1
    noise_factor = 0.2

    # 7. สร้าง noise บวกเพิ่มเข้าในภาพ train_x, val_x, test_x
    train_x_noise = train_x + (noise_factor * np.random.normal(loc=noise_mean, scale=noise_std, size=train_x.shape))
    val_x_noise = val_x + (noise_factor * np.random.normal(loc=noise_mean, scale=noise_std, size=val_x.shape))
    test_x_noise = test_x + (noise_factor * np.random.normal(loc=noise_mean, scale=noise_std, size=test_x.shape))

physical_devices = tf.config.experimental.list_physical_devices()
print("Available physical devices:")
for device in physical_devices:
    print(device)

from google.colab import drive
drive.mount('/content/drive')

train_x = train_x.astype('float64')
assert train_x_noise.shape == train_x.shape, "Shapes of train_x_noise and train_x do not match"
assert train_x_noise.dtype == train_x.dtype, "Data types of train_x_noise and train_x do not match"
print(train_x[0].dtype)
print(train_x_noise[0].dtype)
eps = 8
bs = 64
callback = EarlyStopping(monitor='loss', patience=3)

eps = 8
bs = 64
callback = EarlyStopping(monitor='loss', patience=3)
history = autoencoder.fit(train_x_noise, train_x,
                          epochs=eps,
                          batch_size=bs,
                          shuffle=True,
                          validation_data=(val_x_noise, val_x),
                          callbacks=[callback], verbose=1)

predictions_test = autoencoder.predict(test_x_noise)

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

# เลือก 5 รูปจาก test_x_noise และ test_x
num_samples = 5
selected_indices = np.random.choice(len(test_x_noise), num_samples, replace=False)

# สร้าง subplot สำหรับแสดงภาพ
plt.figure(figsize=(15, 5))

for i, index in enumerate(selected_indices):
    # กำหนด subplot ในตำแหน่งที่เหมาะสม
    plt.subplot(3, num_samples, i + 1)
    plt.imshow(test_x[index], cmap='gray')
    plt.title('Input')
    plt.axis('off')

    plt.subplot(3, num_samples, num_samples + i + 1)
    plt.imshow(test_x_noise[index], cmap='gray')
    plt.title('Noise')
    plt.axis('off')

    plt.subplot(3, num_samples, 2 * num_samples + i + 1)
    plt.imshow(predictions_test[index], cmap='gray')
    plt.title('Testing Image')
    plt.axis('off')

plt.tight_layout()
plt.show()

eps = 8
bs = 16
callback = EarlyStopping(monitor='loss', patience=3)
history = autoencoder.fit(train_x_noise, train_x,
                          epochs=eps,
                          batch_size=bs,
                          shuffle=True,
                          validation_data=(val_x_noise, val_x),
                          callbacks=[callback], verbose=1)

predictions_test = autoencoder.predict(test_x_noise)

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

# เลือก 5 รูปจาก test_x_noise และ test_x
num_samples = 5
selected_indices = np.random.choice(len(test_x_noise), num_samples, replace=False)

# สร้าง subplot สำหรับแสดงภาพ
plt.figure(figsize=(15, 5))

for i, index in enumerate(selected_indices):
    # กำหนด subplot ในตำแหน่งที่เหมาะสม
    plt.subplot(3, num_samples, i + 1)
    plt.imshow(test_x[index], cmap='gray')
    plt.title('Input')
    plt.axis('off')

    plt.subplot(3, num_samples, num_samples + i + 1)
    plt.imshow(test_x_noise[index], cmap='gray')
    plt.title('Noise')
    plt.axis('off')

    plt.subplot(3, num_samples, 2 * num_samples + i + 1)
    plt.imshow(predictions_test[index], cmap='gray')
    plt.title('Testing Image')
    plt.axis('off')

plt.tight_layout()
plt.show()